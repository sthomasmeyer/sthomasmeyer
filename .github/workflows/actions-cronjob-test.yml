name: Fetch NASA's Picture of the Day
run-name: ${{ github.actor }} is fetching the NASA Picture of the Day
# Workflow triggers are defined with the 'on' key in a GitHub Actions YAML file.
on:
  # Note, the 'schedule' event can be delayed during periods of high loads of GitHub Actions workflow runs.
  schedule:
    # GitHub Actions schedule operates on UTC time. Cronjobs expect the following five values, in order:
    # Minute (0-59), Hour (0-23), Day of the Month (1-31), Month (1-12), Day of the Week (0-6)
    - cron: '11 11 * * *'
  workflow_dispatch: # Allows manual triggering of the workflow via the GitHub Actions interface.

# Workflows are made up of one or more jobs that define tasks to be run. Each job runs independently.
jobs:
  update-readme: # The job identifier can be any valid name, but it should describe the job's purpose.
    runs-on: ubuntu-latest # Specify the virtual environment for a job (e.g., windows-latest, macos-latest, etc.)
    permissions:
      contents: write

    # Each job consists of steps that define specific tasks to perform.
    steps:
      - name: Checkout repository # Clearly describe the step.
        # This prebuilt GitHub action checks-out your repository so your workflow can access it.
        uses: actions/checkout@v4

      - name: Check Date
        id: date-check # The [id] makes this step accessible in later steps for referencing outputs or status.
        run: |
          chmod +x .github/date-management/check-date.sh

          while IFS='=' read -r key value; do
            if [[ -n "$key" ]]; then
              echo "$key=$value" >> $GITHUB_OUTPUT
            fi
          done < <(.github/date-management/check-date.sh)

      - name: Fetch NASA Picture of the Day
        id: nasa-fetch
        env:
          NASA_API_KEY: ${{ secrets.NASA_API_KEY }}
        run: |
          echo 'Fetching NASA Picture of the Day'
          response=$(curl -s "https://api.nasa.gov/planetary/apod?api_key=$NASA_API_KEY")
          if [[ $(echo "$response" | jq -r '.code // empty') == "400" ]]; then
            echo "Error: Bad request or invalid API key"
            exit 1
          fi

          # Store NASA data for use in next steps
          echo "nasa_title=$(echo "$response" | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "nasa_url=$(echo "$response" | jq -r '.url')" >> $GITHUB_OUTPUT
          echo "nasa_explanation=$(echo "$response" | jq -r '.explanation')" >> $GITHUB_OUTPUT

      # - name: Get BASH Script Path
      #   if: steps.date-check.outputs.is_notable_date == 'true'
      #   id: get-bash-script
      #   run: |
      #     CURRENT_DATE="${{ steps.date_check.outputs.current_date }}"
      #     MONTH=$(echo $CURRENT_DATE | cut -d'-' -f1)
      #     MONTH_NAME=$(date -d "2024-${MONTH}-01" '+%B' | tr '[:upper:]' '[:lower:]')

      #     SCRIPT_PATH=$(yq ".dates.[\"CURRENT_DATE\"].bash_script" .github/date-management/notable-dates.yml)

      #     if [[ -z "$SCRIPT_PATH" ]]; then
      #       echo "No BASH script specified for this date. Using default description."
      #       echo "use_default=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "Script Found: $SCRIPT_PATH"
      #       echo "use_default=false" >> $GITHUB_OUTPUT
      #       echo "script_path=.github/date-management/bash-scripts/$SCRIPT_PATH" >> $GITHUB_OUTPUT
      #     fi

      # - name: Execute Notable Date Script
      #   if: steps.date-check.output.is_notable_date == 'true' && steps.get-bash-script.output.use_default == 'false'
      #   run: |
      #     SCRIPT_PATH="${{ steps.get-bash-script.outputs.script_path }}"
      #     if [[ -f "$SCRIPT_PATH" ]]; then
      #       chmod +x "$SCRIPT_PATH"
      #       "$SCRIPT_PATH"
      #     else
      #       echo "Error: Script not found at $SCRIPT_PATH"
      #       exit 1
      #     fi

      # - name: Create Fallback Notable Date Content
      #   if: steps.date-check.outputs.is_notable_date == 'true' && steps.get-script.outputs.use_default == 'true'
      #   run: |
      #     echo "# ${{ steps.date-check.outputs.title }}" > README.md
      #     echo "" >> README.md
      #     echo "_Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')_" >> README.md
      #     echo "" >> README.md
      #     echo "${{ steps.date-check.outputs.description }}" >> README.md
      #     echo "" >> README.md

      - name: Get BASH Script Path
        if: steps.date-check.outputs.is_notable_date == 'true'
        id: get-bash-script
        run: |
          CURRENT_DATE="${{ steps.date-check.outputs.current_date }}"
          MONTH=$(echo $CURRENT_DATE | cut -d'-' -f1)
          MONTH_NAME=$(date -d "2024-${MONTH}-01" '+%B' | tr '[:upper:]' '[:lower:]')

          SCRIPT_PATH=$(yq ".dates.[\"$CURRENT_DATE\"].bash_script" .github/date-management/notable-dates.yml)

          if [[ -z "$SCRIPT_PATH" || "$SCRIPT_PATH" == "null" ]]; then
            echo "No BASH script specified for this date. Using default description."
            echo "use_default=true" >> $GITHUB_OUTPUT
          else
            echo "Script Found: $SCRIPT_PATH"
            echo "use_default=false" >> $GITHUB_OUTPUT
            echo "script_path=.github/date-management/bash-scripts/$SCRIPT_PATH" >> $GITHUB_OUTPUT
          fi

      - name: Execute Notable Date Script
        if: steps.date-check.outputs.is_notable_date == 'true' && steps.get-bash-script.outputs.use_default == 'false'
        run: |
          SCRIPT_PATH="${{ steps.get-bash-script.outputs.script_path }}"
          if [[ -f "$SCRIPT_PATH" ]]; then
            chmod +x "$SCRIPT_PATH"
            "$SCRIPT_PATH"
          else
            echo "Error: Script not found at $SCRIPT_PATH"
            exit 1
          fi

      - name: Create Fallback Notable Date Content
        if: steps.date-check.outputs.is_notable_date == 'true' && steps.get-bash-script.outputs.use_default == 'true'
        run: |
          echo "# ${{ steps.date-check.outputs.title }}" > README.md
          echo "" >> README.md
          echo "_Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')_" >> README.md
          echo "" >> README.md
          echo "${{ steps.date-check.outputs.description }}" >> README.md
          echo "" >> README.md

      # If it is NOT a notable date, display the NASA PoD :)
      - name: Create Regular NASA Content
        if: steps.date-check.outputs.is_notable_date != 'true'
        run: |
          echo "# NASA Astronomy Picture of the Day" > README.md
          echo "" >> README.md
          echo "_Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')_" >> README.md
          echo "" >> README.md
          echo "## ${{ steps.nasa-fetch.outputs.nasa_title }}" >> README.md
          echo "" >> README.md
          echo "![${{ steps.nasa-fetch.outputs.nasa_title }}](${{ steps.nasa-fetch.outputs.nasa_url }})" >> README.md
          echo "" >> README.md
          echo "### Description" >> README.md
          echo "" >> README.md
          echo "${{ steps.nasa-fetch.outputs.nasa_explanation }}" >> README.md

      - name: Commit and Push Changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config user.name 'github-actions[bot]'
            git config user.email 'github-actions[bot]@users.noreply.github.com'
            git add README.md

            if [[ "${{ steps.date-check.outputs.is_notable_date }}" == "true" ]]; then
              git commit -m "âœ¨ Special Update: ${{ steps.date-check.outputs.title }} ($(date -u '+%Y-%m-%d'))"
            else
              git commit -m "Daily update: NASA Picture of the Day ($(date -u '+%Y-%m-%d'))"
            fi

            git push
          else
            echo "No changes to commit"
          fi
